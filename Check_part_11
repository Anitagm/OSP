int main() {

    ...

    // Create shared memory region
    DirectoryData * root_data = mmap(NULL, sizeof(DirectoryData), PROT_READ | PROT_WRITE, 
                      MAP_SHARED | MAP_ANONYMOUS, -1, 0);

    ...

    while ((entry = readdir(root_dir)) != NULL) {
        ...

        pid_t pid = fork();
        if (pid < 0) {
            perror("Error forking process");
            return 1;
        } 
        else if (pid == 0) { // Child process
            ...

            // Process the directory
            process_directory(&sub_dir_data);

            // Copy the data to shared memory
            memcpy(root_data, &sub_dir_data, sizeof(DirectoryData));

            // Terminate the child process after it has done its job
            exit(0);
        }
    }

    ...

    // Wait for all child processes to finish
    int status;
    while (wait(&status) > 0){
        if(WIFEXITED(status)) {
            // The child process exited normally
            printf("Child process exited with status: %d\n", WEXITSTATUS(status));
        } 
        else {
            // The child process was terminated by a signal
            printf("Child process terminated by signal: %d\n", WTERMSIG(status));
        }
    }

    ...
}
