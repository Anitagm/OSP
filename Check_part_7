\\final part

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#include <pthread.h>
#include <semaphore.h>
#include <limits.h>

#define MAX_PATH_LENGTH 256
#define MAX_THREADS 100

#define ANSI_COLOR_BLUE "\x1b[94m"
#define ANSI_COLOR_RESET "\x1b[0m"

typedef struct {
    char path[MAX_PATH_LENGTH];
    int file_count;
    int txt_count;
    int c_count;
    int doc_count;
    char smallest_file[MAX_PATH_LENGTH];
    char largest_file[MAX_PATH_LENGTH];
    long long smallest_file_size;
    long long largest_file_size;
    long long int file;
    long long int total_size;
} DirectoryData;

typedef struct {
    int txt_count;
    int c_count;
    int doc_count;
    char smallest_file[MAX_PATH_LENGTH];
    char largest_file[MAX_PATH_LENGTH];
    long long smallest_file_size;
    long long largest_file_size;
    long long int total_size;
    pthread_mutex_t mutex;
} FileTypeCount;

sem_t semaphore;
FileTypeCount file_count_data;


void* process_directory(void* arg) {
    DirectoryData* data = (DirectoryData*)arg;
    char path[MAX_PATH_LENGTH];
    struct dirent* entry;
    struct stat file_stat;
   

    DIR* dir = opendir(data->path);

    if (dir == NULL) {
        perror("Error opening directory");
        pthread_exit(NULL);
    }

    while ((entry = readdir(dir)) != NULL) {

        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
            continue;

        snprintf(path, MAX_PATH_LENGTH, "%s/%s", data->path, entry->d_name);

        if (stat(path, &file_stat) == -1) {
            perror("Error getting file stat");
            continue;
        }

        if (S_ISDIR(file_stat.st_mode)) {
            //directory?
            DirectoryData* sub_data = malloc(sizeof(DirectoryData));
            strcpy(sub_data->path, path);

            
            sub_data->file_count = 0;
            sub_data->txt_count = 0;
            sub_data->c_count = 0;
            sub_data->doc_count = 0;
            sub_data->total_size = 0;

            strcpy(sub_data->smallest_file, "");
            strcpy(sub_data->largest_file, "");
            sub_data->smallest_file_size = LLONG_MAX;
            sub_data->largest_file_size = 0;

            sem_wait(&semaphore);

            pthread_t thread;
            if (pthread_create(&thread, NULL, process_directory, sub_data) != 0) {
                perror("Error creating thread");
                free(sub_data);
                sem_post(&semaphore);
                continue;
            }

            pthread_join(thread, NULL);
            /*printf("data:'%d':\n", sub_data->file_count);
            printf("data:'%d':\n", sub_data->txt_count);
            printf("data:'%d':\n", sub_data->c_count);
            printf("data:'%d':\n", sub_data->doc_count);
            printf("\n");*/

            data->file_count += sub_data->file_count;
            data->txt_count += sub_data->txt_count;
            data->c_count += sub_data->c_count;
            data->doc_count += sub_data->doc_count;
            data->total_size += sub_data->total_size;

            

            if (sub_data->smallest_file_size <= data->smallest_file_size) {
                strcpy(data->smallest_file, sub_data->smallest_file);
                data->smallest_file_size = sub_data->smallest_file_size;
            }

            if (sub_data->largest_file_size >= data->largest_file_size) {
                strcpy(data->largest_file, sub_data->largest_file);
                data->largest_file_size = sub_data->largest_file_size;
            }

            sem_post(&semaphore);

            free(sub_data);
        } else if (S_ISREG(file_stat.st_mode)) {
            //is it a regular file?
            data->file_count++;
            data->total_size += file_stat.st_size;
            
            //printf("path:  %s", data->path);
            //printf("-----Size:  %lld\n", data->total_size);
            char* file_extension = strrchr(entry->d_name, '.');
            if (file_extension != NULL) {
                if (strcmp(file_extension, ".txt") == 0) {
                    pthread_mutex_lock(&file_count_data.mutex);
                    file_count_data.txt_count++;
                    pthread_mutex_unlock(&file_count_data.mutex);
                } else if (strcmp(file_extension, ".c") == 0) {
                    pthread_mutex_lock(&file_count_data.mutex);
                    file_count_data.c_count++;
                    pthread_mutex_unlock(&file_count_data.mutex);
                } else if (strcmp(file_extension, ".doc") == 0) {
                    pthread_mutex_lock(&file_count_data.mutex);
                    file_count_data.doc_count++;
                    pthread_mutex_unlock(&file_count_data.mutex);
                }
                long long file_size = file_stat.st_size;

            if (file_size < data->smallest_file_size) {
                strcpy(data->smallest_file, path);
                data->smallest_file_size = file_size;
            }

            if (file_size > data->largest_file_size) {
                strcpy(data->largest_file, path);
                data->largest_file_size = file_size;
            }
            
            }
             
        }
        
    }
    //printf("Size: %lld bytes\n", (long long)file_stat.st_size);
    

    closedir(dir);
    pthread_exit(NULL);
}
int main() {
    char root_path[MAX_PATH_LENGTH];
    printf("Enter directory path: ");
    scanf("%s", root_path);

    DirectoryData root_data;
    strcpy(root_data.path, root_path);
    root_data.file_count = 0;
    root_data.txt_count = 0;
    root_data.c_count = 0;
    root_data.doc_count = 0;
    root_data.file = 0;
    root_data.total_size = 0;

    strcpy(root_data.smallest_file, "");
    strcpy(root_data.largest_file, "");
    root_data.smallest_file_size = LLONG_MAX;
    root_data.largest_file_size = 0;

    sem_init(&semaphore, 0, MAX_THREADS);
    pthread_mutex_init(&file_count_data.mutex, NULL);

    pthread_t root_thread;
    if (pthread_create(&root_thread, NULL, process_directory, &root_data) != 0) {
        perror("Error creating thread");
        return 0;
    }

    pthread_join(root_thread, NULL);

    printf("Total files in directory '%s':\n", root_path);
    printf("Total files: %d\n", root_data.file_count);
    printf("Total txt files: %d\n", root_data.txt_count + file_count_data.txt_count);
    printf("Total c files: %d\n", root_data.c_count + file_count_data.c_count);
    printf("Total doc files: %d\n", root_data.doc_count + file_count_data.doc_count);        

    if (strcmp(root_data.smallest_file, "") != 0) {
        printf(ANSI_COLOR_BLUE "Smallest file address: %s\n", root_data.smallest_file);
        printf(ANSI_COLOR_RESET "Smallest file size: %lld bytes\n", root_data.smallest_file_size);
    }

    if (strcmp(root_data.largest_file, "") != 0) {
        printf(ANSI_COLOR_BLUE"Largest file address:  %s\n", root_data.largest_file);
        printf(ANSI_COLOR_RESET "Largest file size: %lld bytes\n", root_data.largest_file_size);
    }

    printf("Size:  %lld/100 \n", root_data.total_size);
    
        
    
}   
