#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#include <pthread.h>
#include <semaphore.h>
#include <limits.h>
#include <unistd.h> // برای fork()

#define MAX_PATH_LENGTH 256
#define MAX_THREADS 100

#define ANSI_COLOR_BLUE "\x1b[94m"
#define ANSI_COLOR_RESET "\x1b[0m"

typedef struct {
    char path[MAX_PATH_LENGTH];
    int file_count;
    int txt_count;
    int c_count;
    int doc_count;
    char smallest_file[MAX_PATH_LENGTH];
    char largest_file[MAX_PATH_LENGTH];
    long long smallest_file_size;
    long long largest_file_size;
    long long int file;
    long long int total_size;
} DirectoryData;

typedef struct {
    int txt_count;
    int c_count;
    int doc_count;
    char smallest_file[MAX_PATH_LENGTH];
    char largest_file[MAX_PATH_LENGTH];
    long long smallest_file_size;
    long long largest_file_size;
    long long int total_size;
    pthread_mutex_t mutex;
} FileTypeCount;

sem_t semaphore;
FileTypeCount file_count_data;


void* process_directory(void* arg) {
    DirectoryData* data = (DirectoryData*)arg;
    char path[MAX_PATH_LENGTH];
    struct dirent* entry;
    struct stat file_stat;
   

    DIR* dir = opendir(data->path);

    if (dir == NULL) {
        perror("Error opening directory");
        pthread_exit(NULL);
    }

    while ((entry = readdir(dir)) != NULL) {

        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
            continue;

        snprintf(path, MAX_PATH_LENGTH, "%s/%s", data->path, entry->d_name);

        if (stat(path, &file_stat) == -1) {
            perror("Error getting file stat");
            continue;
        }

        if (S_ISDIR(file_stat.st_mode)) {
            //directory?
            DirectoryData* sub_data = malloc(sizeof(DirectoryData));
            strcpy(sub_data->path, path);

            
            sub_data->file_count = 0;
            sub_data->txt_count = 0;
            sub_data->c_count = 0;
            sub_data->doc_count = 0;
            sub_data->total_size = 0;

            strcpy(sub_data->smallest_file, "");
            strcpy(sub_data->largest_file, "");
            sub_data->smallest_file_size = LLONG_MAX;
            sub_data->largest_file_size = 0;

            sem_wait(&semaphore);

            pid_t pid = fork(); // ایجاد یک فرایند جدید

            if (pid < 0) {
                perror("Error creating process");
                free(sub_data);
                sem_post(&semaphore);
                continue;
            } else if (pid == 0) {
                // کد فرایند فرزند

                process_directory(sub_data); // فراخوانی تابع برای پردازش زیرپوشه

                free(sub_data);
                sem_post(&semaphore);
                exit(0); // خاتمه‌ی فرایند فرزند
            } else {
                // کد فرایند والد

                pthread_t thread;
                if (pthread_create(&thread, NULL, process_directory, sub_data) != 0) {
                    perror("Error creating thread");
                    free(sub_data);
                    sem_post(&semaphore);
                    continue;
                }

                pthread_join(thread, NULL);

                data->file_count += sub_data->file_count;
                data->txt_count += sub_data->txt_count;
                data->c_count += sub_data->c_count;
                data->doc_count += sub_data->doc_count;

                if (sub_data->smallest_file_size < data->smallest_file_size) {
                    strcpy(data->smallest_file, sub_data->smallest_file);
                    data->smallest_file_size = sub_data->smallest_file_size;
                }

                if (sub_data->largest_file_size > data->largest_file_size) {
                    strcpy(data->largest_file, sub_data->largest_file);
                    data->largest_file_size = sub_data->largest_file_size;
                }

                free(sub_data);
                sem_post(&semaphore);
            }

        } else if (S_ISREG(file_stat.st_mode)) {
            //regular file?
            data->file_count++;
            data->total_size += file_stat.st_size;

            if (strstr(entry->d_name, ".txt"))
                data->txt_count++;
            else if (strstr(entry->d_name, ".c"))
                data->c_count++;
            else if (strstr(entry->d_name, ".doc"))
                data->doc_count++;

            if (file_stat.st_size < data->smallest_file_size) {
                strcpy(data->smallest_file, path);
                data->smallest_file_size = file_stat.st_size;
            }

            if (file_stat.st_size > data->largest_file_size) {
                strcpy(data->largest_file, path);
                data->largest_file_size = file_stat.st_size;
            }
        }
    }

    closedir(dir);

    // Update global file count data
    pthread_mutex_lock(&file_count_data.mutex);
    file_count_data.txt_count += data->txt_count;
    file_count_data.c_count += data->c_count;
    file_count_data.doc_count += data->doc_count;
    file_count_data.total_size += data->total_size;

    if (data->smallest_file_size < file_count_data.smallest_file_size) {
        strcpy(file_count_data.smallest_file, data->smallest_file);
        file_count_data.smallest_file_size = data->smallest_file_size;
    }

    if (data->largest_file_size > file_count_data.largest_file_size) {
        strcpy(file_count_data.largest_file, data->largest_file);
        file_count_data.largest_file_size = data->largest_file_size;
    }
    pthread_mutex_unlock(&file_count_data.mutex);

    pthread_exit(NULL);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        printf("Usage: %s <directory>\n", argv[0]);
        return 1;
    }

    DirectoryData data;
    strcpy(data.path, argv[1]);

    data.file_count = 0;
    data.txt_count = 0;
    data.c_count = 0;
    data.doc_count = 0;
    data.total_size = 0;

    strcpy(data.smallest_file, "");
    strcpy(data.largest_file, "");
    data.smallest_file_size = LLONG_MAX;
    data.largest_file_size = 0;

    sem_init(&semaphore, 0, MAX_THREADS);
    pthread_mutex_init(&file_count_data.mutex, NULL);

    process_directory(&data);

    printf(ANSI_COLOR_BLUE "File Count: %d\n", file_count_data.txt_count + file_count_data.c_count + file_count_data.doc_count);
    printf("Text File Count: %d\n", file_count_data.txt_count);
    printf("C File Count: %d\n", file_count_data.c_count);
    printf("DOC File Count: %d\n", file_count_data.doc_count);
    printf("Smallest File: %s\n", file_count_data.smallest_file);
    printf("Largest File: %s\n", file_count_data.largest_file);
    printf("Total Size: %lld bytes\n" ANSI_COLOR_RESET, file_count_data.total_size);

    sem_destroy(&semaphore);
    pthread_mutex_destroy(&file_count_data.mutex);

    return 0;
}
