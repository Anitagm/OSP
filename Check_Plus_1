#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_PATH_LENGTH 256
#define MAX_THREADS 100

typedef struct {
    char path[MAX_PATH_LENGTH];
    int file_count;
    int txt_count;
    int c_count;
    int doc_count;
} DirectoryData;

typedef struct {
    int txt_count;
    int c_count;
    int doc_count;
    pthread_mutex_t mutex;
} FileTypeCount;

sem_t semaphore;
FileTypeCount file_count_data;

void* process_directory(void* arg) {
    DirectoryData* data = (DirectoryData*)arg;
    char path[MAX_PATH_LENGTH];
    struct dirent* entry;
    struct stat file_stat;

    DIR* dir = opendir(data->path);
    if (dir == NULL) {
        perror("Error opening directory");
        pthread_exit(NULL);
    }

    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
            continue;

        snprintf(path, MAX_PATH_LENGTH, "%s/%s", data->path, entry->d_name);

        if (stat(path, &file_stat) == -1) {
            perror("Error getting file stat");
            continue;
        }

        if (S_ISDIR(file_stat.st_mode)) {
            DirectoryData* sub_data = malloc(sizeof(DirectoryData));
            strcpy(sub_data->path, path);
            sub_data->file_count = 0;
            sub_data->txt_count = 0;
            sub_data->c_count = 0;
            sub_data->doc_count = 0;

            sem_wait(&semaphore);

            pthread_t thread;
            if (pthread_create(&thread, NULL, process_directory, sub_data) != 0) {
                perror("Error creating thread");
                free(sub_data);
                sem_post(&semaphore);
                continue;
            }

            pthread_join(thread, NULL);

            data->file_count += sub_data->file_count;
            data->txt_count += sub_data->txt_count;
            data->c_count += sub_data->c_count;
            data->doc_count += sub_data->doc_count;

            sem_post(&semaphore);

            free(sub_data);
        } else if (S_ISREG(file_stat.st_mode)) {
            data->file_count++;

            char* file_extension = strrchr(entry->d_name, '.');
            if (file_extension != NULL) {
                if (strcmp(file_extension, ".txt") == 0) {
                    pthread_mutex_lock(&file_count_data.mutex);
                    file_count_data.txt_count++;
                    pthread_mutex_unlock(&file_count_data.mutex);
                } else if (strcmp(file_extension, ".c") == 0) {
                    pthread_mutex_lock(&file_count_data.mutex);
                    file_count_data.c_count++;
                    pthread_mutex_unlock(&file_count_data.mutex);
                } else if (strcmp(file_extension, ".doc") == 0) {
                    pthread_mutex_lock(&file_count_data.mutex);
                    file_count_data.doc_count++;
                    pthread_mutex_unlock(&file_count_data.mutex);
                }
            }
        }
    }

    closedir(dir);
    pthread_exit(NULL);
}
int main() {
    char root_path[MAX_PATH_LENGTH];
    printf("Enter directory path: ");
    scanf("%s", root_path);

    DirectoryData root_data;
    strcpy(root_data.path, root_path);
    root_data.file_count = 0;
    root_data.txt_count = 0;
    root_data.c_count = 0;
    root_data.doc_count = 0;

    sem_init(&semaphore, 0, MAX_THREADS);
    pthread_mutex_init(&file_count_data.mutex, NULL);

    pthread_t root_thread;
    if (pthread_create(&root_thread, NULL, process_directory, &root_data) != 0) {
        perror("Error creating thread");
        return 0;
    }

    pthread_join(root_thread, NULL);

    printf("Total files in directory '%s':\n", root_path);
    printf("Total files: %d\n", root_data.file_count);
    printf("Total txt files: %d\n", root_data.txt_count + file_count_data.txt_count);
    printf("Total c files: %d\n", root_data.c_count + file_count_data.c_count);
    printf("Total doc files: %d\n", root_data.doc_count + file_count_data.doc_count);        
}   
